// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: contact.sql

package sqlc

import (
	"context"
	"time"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (name, address, staying_min, start_time, end_time)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, address, staying_min, start_time, end_time
`

type CreateContactParams struct {
	Name       string
	Address    string
	StayingMin int32
	StartTime  time.Time
	EndTime    time.Time
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.Name,
		arg.Address,
		arg.StayingMin,
		arg.StartTime,
		arg.EndTime,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Address,
		&i.StayingMin,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :one
DELETE FROM contacts
WHERE id = $1
RETURNING id, created_at, updated_at, name, address, staying_min, start_time, end_time
`

func (q *Queries) DeleteContact(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, deleteContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Address,
		&i.StayingMin,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :one
SELECT id, created_at, updated_at, name, address, staying_min, start_time, end_time FROM contacts
WHERE id = $1
`

func (q *Queries) GetContacts(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContacts, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Address,
		&i.StayingMin,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET name = $2, address = $3, staying_min = $4, start_time = $5, end_time = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, name, address, staying_min, start_time, end_time
`

type UpdateContactParams struct {
	ID         int64
	Name       string
	Address    string
	StayingMin int32
	StartTime  time.Time
	EndTime    time.Time
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.StayingMin,
		arg.StartTime,
		arg.EndTime,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Address,
		&i.StayingMin,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}
